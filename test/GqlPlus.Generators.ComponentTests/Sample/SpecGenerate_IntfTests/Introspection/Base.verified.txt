/* Base
domain _ObjectKind { enum _TypeKind.Dual _TypeKind.Input _TypeKind.Output }

output _TypeObject<$kind:_ObjectKind $field:_ObjField> {
    : _ChildType<$kind _ObjBase>
        typeParams: _ObjTypeParam[]
        fields: $field[]
        alternates: _ObjAlternate[]
        allFields: _ObjectFor<$field>[]
        allAlternates: _ObjectFor<_ObjAlternate>[]
    }

output _ObjTypeParam {
    : _Named
        constraint: _TypeRef<_TypeKind>
    }

output _ObjBase {
    : _Named
        typeArgs: _ObjTypeArg[]
    | _TypeParam
    }

output _ObjTypeArg {
    : _TypeRef<_TypeKind>
        label: _Identifier?
    | _TypeParam
    }

output _TypeParam {
    : _Described
        typeParam: _Identifier
    }

output _ObjAlternate {
      type: _ObjBase
      collections: _Collections[]
    | _ObjAlternateEnum
    }

output _ObjAlternateEnum {
    : _TypeRef<_TypeKind.Enum>
        label: _Identifier
    }
output _ObjectFor<$for:_ForParam> {
    : $for
        object: _Identifier
    }

output _ObjField<$type:_ObjFieldType> {
    : _Aliased
      type: $type
    }

output _ObjFieldType {
    : _ObjBase
        modifiers: _Modifiers[]
    | _ObjFieldEnum
    }

output _ObjFieldEnum {
    : _TypeRef<_TypeKind.Enum>
        label: _Identifier
    }

output _ForParam<$type:_ObjFieldType> {
    | _ObjAlternate
    | _ObjField<$type>
    }
*/

// Generated from Spec Base for Intf

/*
*/
namespace GqlPlus.Gqlp_Spec_Base;

public interface I_ObjectKind
{
}

public interface I_TypeObject<Tkind,Tfield>
  : I_ChildType
{
  _ObjTypeParam typeParams { get; }
  Tfield fields { get; }
  _ObjAlternate alternates { get; }
  _ObjectFor<Tfield> allFields { get; }
  _ObjectFor<_ObjAlternate> allAlternates { get; }
}

public interface I_ObjTypeParam
  : I_Named
{
  _TypeRef<_TypeKind> constraint { get; }
}

public interface I_ObjBase
  : I_Named
{
  _ObjTypeArg typeArgs { get; }
  _TypeParam As_TypeParam { get; }
}

public interface I_ObjTypeArg
  : I_TypeRef
{
  _Identifier label { get; }
  _TypeParam As_TypeParam { get; }
}

public interface I_TypeParam
  : I_Described
{
  _Identifier typeParam { get; }
}

public interface I_ObjAlternate
{
  _ObjBase type { get; }
  _Collections collections { get; }
  _ObjAlternateEnum As_ObjAlternateEnum { get; }
}

public interface I_ObjAlternateEnum
  : I_TypeRef
{
  _Identifier label { get; }
}

public interface I_ObjectFor<Tfor>
  : Ifor
{
  _Identifier object { get; }
}

public interface I_ObjField<Ttype>
  : I_Aliased
{
  Ttype type { get; }
}

public interface I_ObjFieldType
  : I_ObjBase
{
  _Modifiers modifiers { get; }
  _ObjFieldEnum As_ObjFieldEnum { get; }
}

public interface I_ObjFieldEnum
  : I_TypeRef
{
  _Identifier label { get; }
}

public interface I_ForParam<Ttype>
{
  _ObjAlternate As_ObjAlternate { get; }
  _ObjField<Ttype> As_ObjField { get; }
}