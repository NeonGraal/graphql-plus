// category
category { Category }
category category { Category }
output Category { }

// category-alias
category [CatA1] { CatAlias }
category [CatA2] { CatAlias }
output CatAlias { }

// category-mods
category [CatM1] { CatMods? }
category [CatM2] { CatMods? }
output CatMods { }

// directive
directive @Dir { inline }
directive @Dir { spread }

// directive-alias
directive @DirAlias [DirA1] { variable }
directive @DirAlias [DirA2] { field }

// directive-params
directive @DirParams(DirParamsIn) { operation }
directive @DirParams { fragment }
input DirParamsIn { }

// option
option Schema { }
option Schema { }

// option-alias
option Schema [Opt1] { }
option Schema [Opt2] { }

// option-setting
option Schema { setting=true }
option Schema { setting=[0] }

// enum-alias
enum EnAlias [En1] { alias }
enum EnAlias [En2] { alias }

// enum-diff
enum EnDiff { one }
enum EnDiff { two }

// enum-same
enum EnSame { same }
enum EnSame { same }

// enum-same-parent
enum EnSameParent { :EnParent sameP }
enum EnSameParent { :EnParent sameP }
enum EnParent { parent }

// enum-value-alias
enum EnValAlias { value [val1] }
enum EnValAlias { value [val2] }

// object
object Obj { }
object Obj { }

// object-alias
object ObjAlias [Obj1] { }
object ObjAlias [Obj2] { }

// object-alts
object ObjAlts { | ObjAltsType }
object ObjAlts { | ObjAltsType }
object ObjAltsType { }

// object-fields
object ObjFields { field: ObjFields }
object ObjFields { field: ObjFields }

// object-fields-alias
object ObjFieldAlias { field [field1]: ObjFieldAlias }
object ObjFieldAlias { field [field2]: ObjFieldAlias }

// output-fields-enums
output FieldEnums { field = Boolean.true }
output FieldEnums { field = true }

// output-fields-enum-alias
output FieldEnumAlias { field [field1] = Boolean.true }
output FieldEnumAlias { field [field2] = true }

// output-fields-params
output FieldParams { field(FieldParam1): FieldParams }
output FieldParams { field(FieldParam2): FieldParams }
input FieldParam1 { }
input FieldParam2 { }

// object-params
object ObjParams<$test> { test: $test }
object ObjParams<$type> { type: $type }

// object-parent
object ObjPrnt { :PrntObj }
object ObjPrnt { :PrntObj }
object PrntObj { }

// scalar-alias
scalar NumAlias [Num1] { number }
scalar NumAlias [Num2] { number }

// scalar-number
scalar Num { number }
scalar Num { number }

// scalar-number-diff
scalar NumDiff { number 1~9 }
scalar NumDiff { number }

// scalar-number-same
scalar NumSame { number 1~9 }
scalar NumSame { number 1~9 }

// scalar-string
scalar Str { string }
scalar Str { string }

// scalar-string-diff
scalar StrDiff { string /a+/ }
scalar StrDiff { string }

// scalar-string-same
scalar StrSame { string /a+/ }
scalar StrSame { string /a+/ }

// union-diff
union UnDiff { Boolean }
union UnDiff { Number }

// union-same
union UnSame { Boolean }
union UnSame { Boolean }
