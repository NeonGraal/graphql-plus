domain _ObjectKind { enum _TypeKind.Dual _TypeKind.Input _TypeKind.Output }

output _TypeObject<$kind:_ObjectKind $field:_Field> {
    : _ChildType<$kind _ObjBase>
        typeParams: _ObjTypeParam[]
        fields: $field[]
        alternates: _Alternate[]
        allFields: _ObjectFor<$field>[]
        allAlternates: _ObjectFor<_Alternate>[]
    }

output _ObjTypeParam {
    : _Named
        constraint: _TypeRef<_TypeKind>
    }

output _ObjBase {
    : _Named
        typeArgs: _ObjTypeArg[]
    | _TypeParam
    }

output _ObjTypeArg {
    : _TypeRef<_TypeKind>
        label: _Identifier?
    | _TypeParam
    }

output _TypeParam {
    : _Described
        typeParam: _Identifier
    }

output _Alternate {
      type: _ObjBase
      collections: _Collections[]
    | _AlternateEnum
    }

output _AlternateEnum {
    : _TypeRef<_TypeKind.Enum>
        label: _Identifier
    }
output _ObjectFor<$for:_ForParam> {
    : $for
        object: _Identifier
    }

output _Field {
    : _Aliased
      type: _ObjBase
      modifiers: _Modifiers[]
    | _FieldEnum
    }

output _FieldEnum {
    : _TypeRef<_TypeKind.Enum>
        field: _Identifier
        label: _Identifier
    }

output _ForParam {
    | _Alternate
    | _Field
    }

output _TypeDual {
    : _TypeObject<_TypeKind.Dual _Field>
    }

output _TypeInput {
    : _TypeObject<_TypeKind.Input _InputField>
    }

output _InputField {
    : _Field
        default: Value?
    }

output _InputParam {
    : _InputBase
        modifiers: _Modifiers[]
        default: Value?
    }

output _TypeOutput {
    : _TypeObject<_TypeKind.Output _OutputField>
    }

output _OutputField {
    : _Field
        parameters: _InputParam[]
    }

