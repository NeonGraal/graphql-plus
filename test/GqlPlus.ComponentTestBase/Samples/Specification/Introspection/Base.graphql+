domain _ObjectKind { enum _TypeKind.Dual _TypeKind.Input _TypeKind.Output }

output _TypeObject<$kind:_ObjectKind $field:_ObjField> {
    : _ChildType<$kind _ObjBase>
        typeParams: _ObjTypeParam[]
        fields: $field[]
        alternates: _ObjAlternate[]
        allFields: _ObjectFor<$field>[]
        allAlternates: _ObjectFor<_ObjAlternate>[]
    }

output _ObjTypeParam {
    : _Named
        constraint: _TypeRef<_TypeKind>
    }

output _ObjBase {
    : _Named
        typeArgs: _ObjTypeArg[]
    | _TypeParam
    }

output _ObjTypeArg {
    : _TypeRef<_TypeKind>
        label: _Identifier?
    | _TypeParam
    }

output _TypeParam {
    : _Described
        typeParam: _Identifier
    }

output _ObjAlternate {
      type: _ObjBase
      collections: _Collections[]
    | _ObjAlternateEnum
    }

output _ObjAlternateEnum {
    : _TypeRef<_TypeKind.Enum>
        label: _Identifier
    }
output _ObjectFor<$for:_ForParam> {
    : $for
        object: _Identifier
    }

output _ObjField<$type:_ObjFieldType> {
    : _Aliased
      type: $type
    }

output _ObjFieldType {
    : _ObjBase
        modifiers: _Modifiers[]
    | _ObjFieldEnum
    }

output _ObjFieldEnum {
    : _TypeRef<_TypeKind.Enum>
        label: _Identifier
    }

output _ForParam {
    | _ObjAlternate
    | _ObjField
    }

