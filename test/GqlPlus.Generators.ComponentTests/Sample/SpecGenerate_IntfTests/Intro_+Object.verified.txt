/* Intro_+Object
domain _ObjectKind { enum _TypeKind.Dual _TypeKind.Input _TypeKind.Output }

output _TypeObject<$kind:_ObjectKind $parent:_ObjBase
            $typeParam:_ObjTypeParam $field:_Field $alternate:_Alternate> {
    : _ChildType<$kind $parent>
        typeParams: $typeParam[]
        fields: $field[]
        alternates: $alternate[]
        allFields: _ObjectFor<$field>[]
        allAlternates: _ObjectFor<$alternate>[]
    }

output _ObjTypeParam<$kind:_ObjectKind> {
    : _Named
        constraint: _ObjConstraint<$kind>
    }

output _ObjConstraint<$kind:_ObjectKind> {
    : _TypeRef<$kind>
    }

output _ObjBase<$arg:_ObjTypeArg> {
    : _Named
        typeArgs: $arg[]
    | _TypeParam
    }

output _ObjTypeArg {
    : _TypeRef<_TypeKind>
    | _TypeParam
    }

output _TypeParam {
    : _Named
        typeParam: _Identifier
    }

output _Alternate<$base:_ObjBase> {
      type: $base
      collections: _Collections[]
    }

output _ObjectFor<$for:_ForParam> {
    : $for
        object: _Identifier
    }

output _Field<$base:_ObjBase> {
    : _Aliased
      type: $base
      modifiers: _Modifiers[]
    }

output _ForParam<$base:_ObjBase> {
    | _Alternate<$base>
    | _Field<$base>
    }

output _TypeDual {
    : _TypeObject<_TypeKind.Dual _DualBase _DualTypeParam _DualField _DualAlternate>
    }

output _DualBase {
    : _ObjBase<_DualTypeArg>
    }

output _DualTypeParam {
    : _ObjTypeParam<_TypeKind.Dual>
    }

output _DualField {
    : _Field<_DualBase>
    }

output _DualAlternate {
    : _Alternate<_DualBase>
    }

output _DualTypeArg {
    : _ObjTypeArg
    }

output _TypeInput {
    : _TypeObject<_TypeKind.Input _InputBase _InputTypeParam _InputField _InputAlternate>
    }

output _InputBase {
    : _ObjBase<_InputTypeArg>
    | _DualBase
    }

output _InputTypeParam {
    : _ObjTypeParam<_TypeKind.Input>
    | _TypeRef<_TypeKind.Dual>
    }

output _InputField {
    : _Field<_InputBase>
        default: _Constant?
    }

output _InputAlternate {
    : _Alternate<_InputBase>
    }

output _InputTypeArg {
    : _ObjTypeArg
    }

output _InputParam {
    : _InputBase
        modifiers: _Modifiers[]
        default: _Constant?
    }

output _TypeOutput {
    : _TypeObject<_TypeKind.Output _OutputBase _OutputTypeParam _OutputField _OutputAlternate>
    }

output _OutputBase {
    : _ObjBase<_OutputTypeArg>
    | _DualBase
    }

output _OutputTypeParam {
    : _ObjTypeParam<_TypeKind.Output>
    | _TypeRef<_TypeKind.Dual>
    | _TypeRef<_TypeKind.Enum>
    }

output _OutputField {
    : _Field<_OutputBase>
        parameters: _InputParam[]
    | _OutputEnum
    }

output _OutputAlternate {
    : _Alternate<_OutputBase>
    }

output _OutputTypeArg {
    : _ObjTypeArg
        label: _Identifier?
    }

output _OutputEnum {
    : _TypeRef<_TypeKind.Enum>
        field: _Identifier
        label: _Identifier
    }
*/

// Generated from Spec Intro_+Object

/*
*/

namespace GqlPlus.Gqlp_Spec_Intro__Object;

public interface I_ObjectKind
{
}

public interface I_TypeObject<Tkind,Tparent,TtypeParam,Tfield,Talternate>
  : I_ChildType
{
  TtypeParam typeParams { get; }
  Tfield fields { get; }
  Talternate alternates { get; }
  _ObjectFor<Tfield> allFields { get; }
  _ObjectFor<Talternate> allAlternates { get; }
}

public interface I_ObjTypeParam<Tkind>
  : I_Named
{
  _ObjConstraint<Tkind> constraint { get; }
}

public interface I_ObjConstraint<Tkind>
  : I_TypeRef
{
}

public interface I_ObjBase<Targ>
  : I_Named
{
  Targ typeArgs { get; }
  _TypeParam As_TypeParam { get; }
}

public interface I_ObjTypeArg
  : I_TypeRef
{
  _TypeParam As_TypeParam { get; }
}

public interface I_TypeParam
  : I_Named
{
  _Identifier typeParam { get; }
}

public interface I_Alternate<Tbase>
{
  Tbase type { get; }
  _Collections collections { get; }
}

public interface I_ObjectFor<Tfor>
  : Ifor
{
  _Identifier object { get; }
}

public interface I_Field<Tbase>
  : I_Aliased
{
  Tbase type { get; }
  _Modifiers modifiers { get; }
}

public interface I_ForParam<Tbase>
{
  _Alternate<Tbase> As_Alternate { get; }
  _Field<Tbase> As_Field { get; }
}

public interface I_TypeDual
  : I_TypeObject
{
}

public interface I_DualBase
  : I_ObjBase
{
}

public interface I_DualTypeParam
  : I_ObjTypeParam
{
}

public interface I_DualField
  : I_Field
{
}

public interface I_DualAlternate
  : I_Alternate
{
}

public interface I_DualTypeArg
  : I_ObjTypeArg
{
}

public interface I_TypeInput
  : I_TypeObject
{
}

public interface I_InputBase
  : I_ObjBase
{
  _DualBase As_DualBase { get; }
}

public interface I_InputTypeParam
  : I_ObjTypeParam
{
  _TypeRef<_TypeKind> As_TypeRef { get; }
}

public interface I_InputField
  : I_Field
{
  _Constant default { get; }
}

public interface I_InputAlternate
  : I_Alternate
{
}

public interface I_InputTypeArg
  : I_ObjTypeArg
{
}

public interface I_InputParam
  : I_InputBase
{
  _Modifiers modifiers { get; }
  _Constant default { get; }
}

public interface I_TypeOutput
  : I_TypeObject
{
}

public interface I_OutputBase
  : I_ObjBase
{
  _DualBase As_DualBase { get; }
}

public interface I_OutputTypeParam
  : I_ObjTypeParam
{
  _TypeRef<_TypeKind> As_TypeRef { get; }
  _TypeRef<_TypeKind> As_TypeRef { get; }
}

public interface I_OutputField
  : I_Field
{
  _InputParam parameters { get; }
  _OutputEnum As_OutputEnum { get; }
}

public interface I_OutputAlternate
  : I_Alternate
{
}

public interface I_OutputTypeArg
  : I_ObjTypeArg
{
  _Identifier label { get; }
}

public interface I_OutputEnum
  : I_TypeRef
{
  _Identifier field { get; }
  _Identifier label { get; }
}