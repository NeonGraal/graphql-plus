// category
category { Category }
category category { Category }
output Category { }

// category-alias
category [CatA1] { CatAlias }
category [CatA2] { CatAlias }
output CatAlias { }

// category-mods
category [CatM1] { CatMods? }
category [CatM2] { CatMods? }
output CatMods { }

// directive
directive @Dir { inline }
directive @Dir { spread }

// directive-alias
directive @DirAlias [DirA1] { variable }
directive @DirAlias [DirA2] { field }

// directive-params
directive @DirParams(DirParamsIn) { operation }
directive @DirParams { fragment }
input DirParamsIn { }

// option
option Schema { }
option Schema { }

// option-alias
option Schema [Opt1] { }
option Schema [Opt2] { }

// option-value
option Schema { setting=true }
option Schema { setting=[0] }

// enum-alias
enum EnAlias [En1] { alias }
enum EnAlias [En2] { alias }

// enum-diff
enum EnDiff { one }
enum EnDiff { two }

// enum-same
enum EnSame { same }
enum EnSame { same }

// enum-same-parent
enum EnSameParent { :EnParent sameP }
enum EnSameParent { :EnParent sameP }
enum EnParent { parent }

// enum-value-alias
enum EnValAlias { value [val1] }
enum EnValAlias { value [val2] }

// object
object ObjName { }
object ObjName { }

// object-alias
object ObjName [Obj1] { }
object ObjName [Obj2] { }

// object-alts
object ObjName { | ObjNameType }
object ObjName { | ObjNameType }
object ObjNameType { }

// object-fields
object ObjName { field: ObjNameFld }
object ObjName { field: ObjNameFld }
object ObjNameFld { }

// object-fields-alias
object ObjName { field [field1]: ObjNameFld }
object ObjName { field [field2]: ObjNameFld }
object ObjNameFld { }

// output-fields-enums
output FieldEnums { field = Boolean.true }
output FieldEnums { field = true }

// output-fields-enum-alias
output FieldEnumAlias { field [field1] = Boolean.true }
output FieldEnumAlias { field [field2] = true }

// output-fields-params
output FieldParams { field(FieldParam1): FieldParamsFld }
output FieldParams { field(FieldParam2): FieldParamsFld }
input FieldParam1 { }
input FieldParam2 { }
output FieldParamsFld { }

// object-params
object ObjName<$test> { test: $test }
object ObjName<$type> { type: $type }

// object-parent
object ObjName { :ObjNameRef }
object ObjName { :ObjNameRef }
object ObjNameRef { }

// domain-alias
domain NumAlias [Num1] { number }
domain NumAlias [Num2] { number }

// domain-boolean
domain Bool { boolean }
domain Bool { boolean }

// domain-boolean-diff
domain BoolDiff { boolean true }
domain BoolDiff { boolean false }

// domain-boolean-same
domain BoolSame { boolean true }
domain BoolSame { boolean true }

// domain-enum-diff
domain EnumDiff { enum true }
domain EnumDiff { enum false }

// domain-enum-same
domain EnumSame { enum true }
domain EnumSame { enum true }

// domain-number
domain Num { number }
domain Num { number }

// domain-number-diff
domain NumDiff { number 1~9 }
domain NumDiff { number }

// domain-number-same
domain NumSame { number 1~9 }
domain NumSame { number 1~9 }

// domain-string
domain Str { string }
domain Str { string }

// domain-string-diff
domain StrDiff { string /a+/ }
domain StrDiff { string }

// domain-string-same
domain StrSame { string /a+/ }
domain StrSame { string /a+/ }

// union-diff
union UnDiff { Boolean }
union UnDiff { Number }

// union-same
union UnSame { Boolean }
union UnSame { Boolean }
