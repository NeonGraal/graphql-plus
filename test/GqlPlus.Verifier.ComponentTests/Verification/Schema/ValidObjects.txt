// alts-mods-Boolean
object ObjAltMods { | ObjModsAlt[^] }
object ObjModsAlt { }

// parent
object ObjTestBase { :ObjBaseTest }
object ObjBaseTest { }

// fields-mods-Enum
object ObjFieldMods { field: ObjFieldMods[ObjFieldEnum] }
enum ObjFieldEnum { value }

// generic-alt
object ObjGenAlt<$type> { | $type }

// generic-parent
object ObjGenBase<$type> { :$type }

// generic-field
object ObjGenField<$type> { field: $type }

// generic-alt-arg
object ObjGenAltArg<$type> { | ObjGenAltRef<$type> }
object ObjGenAltRef<$ref> { | $ref }

// generic-parent-arg
object ObjGenBaseArg<$type> { :ObjGenBaseRef<$type> }
object ObjGenBaseRef<$ref> { | $ref }

// generic-field-arg
object ObjGenFieldArg<$type> { field: ObjGenFieldRef<$type> }
object ObjGenFieldRef<$ref> { | $ref }

// generic-param
object ObjGenParam { field: ObjGenParamRef<ObjGenParamAlt> }
object ObjGenParamRef<$ref> { | $ref }
object ObjGenParamAlt { }

// input-field-Number
input InFieldNum { field: Number = 0 }

// input-field-String
input InFieldStr { field: String = '' }

// input-field-Enum
input InFieldEnum { field: InEnumField = value }
enum InEnumField { value }

// input-field-null
input InFieldNull { field: InFieldNull? = null }

// output-field-enum
output OutFieldEnum { field = OutEnumField.outEnumField }
enum OutEnumField { outEnumField }

// output-field-enum-parent
output OutFieldParent { field = OutEnumParented.outEnumParent }
enum OutEnumParented { :OutEnumParent outParent ed }
enum OutEnumParent { outEnumParent }

// output-field-value
output OutFieldValue { field = outEnumValue }
enum OutEnumValue { outEnumValue }

// output-generic-enum
output OutGenEnum { | OutGenEnumRef<OutEnumGen.outEnumGen> }
output OutGenEnumRef<$type> { field: $type }
enum OutEnumGen { outEnumGen }

// output-generic-parent
output OutGenParent { | OutGenParentRef<OutParentGen.outGenParent> }
output OutGenParentRef<$type> { field: $type }
enum OutParentGen { :OutPrntendedGen outGenPrntended }
enum OutPrntendedGen { outGenParent }

// output-generic-value
output OutGenValue { | OutGenValueRef<outValueGen> }
output OutGenValueRef<$type> { field: $type }
enum OutValueGen { outValueGen }

// output-params
output OutParams { field(OutParam): OutParams }
input OutParam { }

// output-params-mods-Scalar
output OutParamsScalar { field(OutParamScalar[OutScalarParam]): OutParamsScalar }
input OutParamScalar { }
scalar OutScalarParam { number 1 ~ 10 }
