/* Introspection
output _Schema {
    : _Named
        categories(_CategoryFilter?): _Categories[_Identifier]
        directives(_Filter?): _Directives[_Identifier]
        types(_TypeFilter?): _Type[_Identifier]
        settings(_Filter?): _Setting[_Identifier]
    }

domain _Identifier { String /[A-Za-z_][A-Za-z0-9_]*/ }

input _Filter {
        names: _NameFilter[]
        matchAliases: Boolean? = true
        aliases: _NameFilter[]
        returnByAlias: Boolean? = false
        returnReferencedTypes: Boolean? = false
    | _NameFilter[]
    }

"_NameFilter is a simple match expression against _Identifier"
"where '.' matches any single character and '*' matches zero or more of any character."
domain _NameFilter { String /[A-Za-z_.*]+/ }

input _CategoryFilter {
    : _Filter
        resolutions: _Resolution[]
    }

input _TypeFilter {
    : _Filter
        kinds: _TypeKind[]
    }

dual _Aliased {
    : _Named
        aliases: _Identifier[]
    }

dual _Named {
    : _Described
        name: _Identifier
    }

dual _Described {
        description: String[]
    }

output _AndType {
    : _Named
        type: _Type
    | _Type
    }

output _Categories {
    : _AndType
        category: _Category
    | _Category
    }

output _Category {
    : _Aliased
        resolution: _Resolution
        output: _TypeRef<_TypeKind.Output>
        modifiers: _Modifiers[]
    }

enum _Resolution { Parallel Sequential Single }

output _Directives {
    : _AndType
        directive: _Directive
    | _Directive
    }

output _Directive {
    : _Aliased
        parameters: _InputParam[]
        repeatable: Boolean
        locations: _[_Location]
    }

enum _Location { Operation Variable Field Inline Spread Fragment }


output _Setting {
    : _Named
        value: Value
    }

output _Type {
    | _BaseType<_TypeKind.Basic>
    | _BaseType<_TypeKind.Internal>
    | _TypeDual
    | _TypeEnum
    | _TypeInput
    | _TypeOutput
    | _TypeDomain
    | _TypeUnion
    }

output _BaseType<$kind:_TypeKind> {
    : _Aliased
        typeKind: $kind
    }

output _ChildType<$kind:_TypeKind $parent:_Described> {
    : _BaseType<$kind>
        parent: $parent
    }

output _ParentType<$kind:_TypeKind $item:_Described $allItem:_Described> {
    : _ChildType<$kind _Named>
        items: $item[]
        allItems: $allItem[]
    }

enum _SimpleKind { Basic Enum Internal Domain Union }

enum _TypeKind { :_SimpleKind Dual Input Output }

dual _TypeRef<$kind:_TypeKind> {
    : _Named
        typeKind: $kind
}

dual _TypeSimple {
    | _TypeRef<_TypeKind.Basic>
    | _TypeRef<_TypeKind.Enum>
    | _TypeRef<_TypeKind.Domain>
    | _TypeRef<_TypeKind.Union>
    }

dual _Collections {
    | _Modifier<_ModifierKind.List>
    | _ModifierKeyed<_ModifierKind.Dictionary>
    | _ModifierKeyed<_ModifierKind.TypeParam>
    }

dual _ModifierKeyed<$kind:_ModifierKind> {
    : _Modifier<$kind>
        by: _TypeSimple
        optional: Boolean
    }

dual _Modifiers {
    | _Modifier<_ModifierKind.Optional>
    | _Collections
    }

enum _ModifierKind { Opt[Optional] List Dict[Dictionary] Param[TypeParam] }

dual _Modifier<$kind:_ModifierKind> {
        modifierKind: $kind
    }

enum _DomainKind { Boolean Enum Number String }

output _TypeDomain {
    | _BaseDomain<_DomainKind.Boolean _DomainTrueFalse _DomainItemTrueFalse>
    | _BaseDomain<_DomainKind.Enum _DomainLabel _DomainItemLabel>
    | _BaseDomain<_DomainKind.Number _DomainRange _DomainItemRange>
    | _BaseDomain<_DomainKind.String _DomainRegex _DomainItemRegex>
    }

output _DomainRef<$kind:_DomainKind> {
    : _TypeRef<_TypeKind.Domain>
        domainKind: $kind
    }

output _BaseDomain<$domain:_DomainKind $item:_BaseDomainItem $domainItem:_DomainItem> {
    : _ParentType<_TypeKind.Domain $item $domainItem>
        domainKind: $domain
    }

dual _BaseDomainItem {
    : _Described
        exclude: Boolean
    }

output _DomainItem<$item:_BaseDomainItem> {
    : $item
        domain: _Identifier
    }

output _DomainValue<$kind:_DomainKind $value:_BasicValue> {
    : _DomainRef<$kind>
        value: $value
    | $value
    }

output _BasicValue {
    | Boolean
    | _EnumValue
    | Number
    | String
    }

dual _DomainTrueFalse {
    : _BaseDomainItem
        value: Boolean
    }

output _DomainItemTrueFalse {
    : _DomainItem<_DomainTrueFalse>
    }

output _DomainLabel {
    : _BaseDomainItem
        label: _EnumValue
    }

output _DomainItemLabel {
    : _DomainItem<_DomainLabel>
    }

dual _DomainRange {
    : _BaseDomainItem
        lower: Number?
        upper: Number?
    }

output _DomainItemRange {
    : _DomainItem<_DomainRange>
    }

dual _DomainRegex {
    : _BaseDomainItem
        pattern: String
    }

output _DomainItemRegex {
    : _DomainItem<_DomainRegex>
    }

output _TypeEnum {
    : _ParentType<_TypeKind.Enum _Aliased _EnumLabel>
    }

dual _EnumLabel {
    : _Aliased
        enum: _Identifier
    }

output _EnumValue {
    : _TypeRef<_TypeKind.Enum>
        label: _Identifier
    }

output _TypeUnion {
    : _ParentType<_TypeKind.Union _UnionRef _UnionMember>
    }

output _UnionRef {
    : _TypeRef<_SimpleKind>
    }

output _UnionMember {
    : _UnionRef
        union: _Identifier
    }

domain _ObjectKind { enum _TypeKind.Dual _TypeKind.Input _TypeKind.Output }

output _TypeObject<$kind:_ObjectKind $field:_ObjField> {
    : _ChildType<$kind _ObjBase>
        typeParams: _ObjTypeParam[]
        fields: $field[]
        alternates: _ObjAlternate[]
        allFields: _ObjectFor<$field>[]
        allAlternates: _ObjectFor<_ObjAlternate>[]
    }

output _ObjTypeParam {
    : _Named
        constraint: _TypeRef<_TypeKind>
    }

output _ObjBase {
    : _Named
        typeArgs: _ObjTypeArg[]
    | _TypeParam
    }

output _ObjTypeArg {
    : _TypeRef<_TypeKind>
        label: _Identifier?
    | _TypeParam
    }

output _TypeParam {
    : _Described
        typeParam: _Identifier
    }

output _ObjAlternate {
      type: _ObjBase
      collections: _Collections[]
    | _ObjAlternateEnum
    }

output _ObjAlternateEnum {
    : _TypeRef<_TypeKind.Enum>
        label: _Identifier
    }
output _ObjectFor<$for:_ForParam> {
    : $for
        object: _Identifier
    }

output _ObjField<$type:_ObjFieldType> {
    : _Aliased
      type: $type
    }

output _ObjFieldType {
    : _ObjBase
        modifiers: _Modifiers[]
    | _ObjFieldEnum
    }

output _ObjFieldEnum {
    : _TypeRef<_TypeKind.Enum>
        label: _Identifier
    }

output _ForParam<$type:_ObjFieldType> {
    | _ObjAlternate
    | _ObjField<$type>
    }

output _TypeDual {
    : _TypeObject<_TypeKind.Dual _DualField>
    }

output _DualField {
    : _ObjField<_ObjFieldType>
    }

output _TypeInput {
    : _TypeObject<_TypeKind.Input _InputField>
    }

output _InputField {
    : _ObjField<_InputFieldType>
    }

output _InputFieldType {
    : _ObjFieldType
        default: Value?
    }

output _InputParam {
    : _InputFieldType
    }

output _TypeOutput {
    : _TypeObject<_TypeKind.Output _OutputField>
    }

output _OutputField {
    : _ObjField<_ObjFieldType>
    }

output _OutputFieldType {
    : _ObjFieldType
        parameters: _InputParam[]
    }
*/

// Generated from Spec Introspection for Intf

/*
*/
namespace GqlPlus.Gqlp_Spec_Introspection;

public interface I_Schema
  : I_Named
{
  _Categories categories { get; }
  _Directives directives { get; }
  _Type types { get; }
  _Setting settings { get; }
}

public interface I_Identifier
{
}

public interface I_Filter
{
  _NameFilter names { get; }
  Boolean matchAliases { get; }
  _NameFilter aliases { get; }
  Boolean returnByAlias { get; }
  Boolean returnReferencedTypes { get; }
  _NameFilter As_NameFilter { get; }
}

public interface I_NameFilter
{
}

public interface I_CategoryFilter
  : I_Filter
{
  _Resolution resolutions { get; }
}

public interface I_TypeFilter
  : I_Filter
{
  _TypeKind kinds { get; }
}

public interface I_Aliased
  : I_Named
{
  _Identifier aliases { get; }
}

public interface I_Named
  : I_Described
{
  _Identifier name { get; }
}

public interface I_Described
{
  String description { get; }
}

public interface I_AndType
  : I_Named
{
  _Type type { get; }
  _Type As_Type { get; }
}

public interface I_Categories
  : I_AndType
{
  _Category category { get; }
  _Category As_Category { get; }
}

public interface I_Category
  : I_Aliased
{
  _Resolution resolution { get; }
  _TypeRef<_TypeKind> output { get; }
  _Modifiers modifiers { get; }
}

public interface I_Directives
  : I_AndType
{
  _Directive directive { get; }
  _Directive As_Directive { get; }
}

public interface I_Directive
  : I_Aliased
{
  _InputParam parameters { get; }
  Boolean repeatable { get; }
  Unit locations { get; }
}

public interface I_Setting
  : I_Named
{
  _Value value { get; }
}

public interface I_Type
{
  _BaseType<_TypeKind> As_BaseType { get; }
  _BaseType<_TypeKind> As_BaseType { get; }
  _TypeDual As_TypeDual { get; }
  _TypeEnum As_TypeEnum { get; }
  _TypeInput As_TypeInput { get; }
  _TypeOutput As_TypeOutput { get; }
  _TypeDomain As_TypeDomain { get; }
  _TypeUnion As_TypeUnion { get; }
}

public interface I_BaseType<Tkind>
  : I_Aliased
{
  Tkind typeKind { get; }
}

public interface I_ChildType<Tkind,Tparent>
  : I_BaseType
{
  Tparent parent { get; }
}

public interface I_ParentType<Tkind,Titem,TallItem>
  : I_ChildType
{
  Titem items { get; }
  TallItem allItems { get; }
}

public interface I_TypeRef<Tkind>
  : I_Named
{
  Tkind typeKind { get; }
}

public interface I_TypeSimple
{
  _TypeRef<_TypeKind> As_TypeRef { get; }
  _TypeRef<_TypeKind> As_TypeRef { get; }
  _TypeRef<_TypeKind> As_TypeRef { get; }
  _TypeRef<_TypeKind> As_TypeRef { get; }
}

public interface I_Collections
{
  _Modifier<_ModifierKind> As_Modifier { get; }
  _ModifierKeyed<_ModifierKind> As_ModifierKeyed { get; }
  _ModifierKeyed<_ModifierKind> As_ModifierKeyed { get; }
}

public interface I_ModifierKeyed<Tkind>
  : I_Modifier
{
  _TypeSimple by { get; }
  Boolean optional { get; }
}

public interface I_Modifiers
{
  _Modifier<_ModifierKind> As_Modifier { get; }
  _Collections As_Collections { get; }
}

public interface I_Modifier<Tkind>
{
  Tkind modifierKind { get; }
}

public interface I_TypeDomain
{
  _BaseDomain<_DomainKind, _DomainTrueFalse, _DomainItemTrueFalse> As_BaseDomain { get; }
  _BaseDomain<_DomainKind, _DomainLabel, _DomainItemLabel> As_BaseDomain { get; }
  _BaseDomain<_DomainKind, _DomainRange, _DomainItemRange> As_BaseDomain { get; }
  _BaseDomain<_DomainKind, _DomainRegex, _DomainItemRegex> As_BaseDomain { get; }
}

public interface I_DomainRef<Tkind>
  : I_TypeRef
{
  Tkind domainKind { get; }
}

public interface I_BaseDomain<Tdomain,Titem,TdomainItem>
  : I_ParentType
{
  Tdomain domainKind { get; }
}

public interface I_BaseDomainItem
  : I_Described
{
  Boolean exclude { get; }
}

public interface I_DomainItem<Titem>
  : Iitem
{
  _Identifier domain { get; }
}

public interface I_DomainValue<Tkind,Tvalue>
  : I_DomainRef
{
  Tvalue value { get; }
  Tvalue Asvalue { get; }
}

public interface I_BasicValue
{
  _DomainKind As_DomainKind { get; }
  _EnumValue As_EnumValue { get; }
  _DomainKind As_DomainKind { get; }
  _DomainKind As_DomainKind { get; }
}

public interface I_DomainTrueFalse
  : I_BaseDomainItem
{
  Boolean value { get; }
}

public interface I_DomainItemTrueFalse
  : I_DomainItem
{
}

public interface I_DomainLabel
  : I_BaseDomainItem
{
  _EnumValue label { get; }
}

public interface I_DomainItemLabel
  : I_DomainItem
{
}

public interface I_DomainRange
  : I_BaseDomainItem
{
  Number lower { get; }
  Number upper { get; }
}

public interface I_DomainItemRange
  : I_DomainItem
{
}

public interface I_DomainRegex
  : I_BaseDomainItem
{
  String pattern { get; }
}

public interface I_DomainItemRegex
  : I_DomainItem
{
}

public interface I_TypeEnum
  : I_ParentType
{
}

public interface I_EnumLabel
  : I_Aliased
{
  _Identifier enum { get; }
}

public interface I_EnumValue
  : I_TypeRef
{
  _Identifier label { get; }
}

public interface I_TypeUnion
  : I_ParentType
{
}

public interface I_UnionRef
  : I_TypeRef
{
}

public interface I_UnionMember
  : I_UnionRef
{
  _Identifier union { get; }
}

public interface I_ObjectKind
{
}

public interface I_TypeObject<Tkind,Tfield>
  : I_ChildType
{
  _ObjTypeParam typeParams { get; }
  Tfield fields { get; }
  _ObjAlternate alternates { get; }
  _ObjectFor<Tfield> allFields { get; }
  _ObjectFor<_ObjAlternate> allAlternates { get; }
}

public interface I_ObjTypeParam
  : I_Named
{
  _TypeRef<_TypeKind> constraint { get; }
}

public interface I_ObjBase
  : I_Named
{
  _ObjTypeArg typeArgs { get; }
  _TypeParam As_TypeParam { get; }
}

public interface I_ObjTypeArg
  : I_TypeRef
{
  _Identifier label { get; }
  _TypeParam As_TypeParam { get; }
}

public interface I_TypeParam
  : I_Described
{
  _Identifier typeParam { get; }
}

public interface I_ObjAlternate
{
  _ObjBase type { get; }
  _Collections collections { get; }
  _ObjAlternateEnum As_ObjAlternateEnum { get; }
}

public interface I_ObjAlternateEnum
  : I_TypeRef
{
  _Identifier label { get; }
}

public interface I_ObjectFor<Tfor>
  : Ifor
{
  _Identifier object { get; }
}

public interface I_ObjField<Ttype>
  : I_Aliased
{
  Ttype type { get; }
}

public interface I_ObjFieldType
  : I_ObjBase
{
  _Modifiers modifiers { get; }
  _ObjFieldEnum As_ObjFieldEnum { get; }
}

public interface I_ObjFieldEnum
  : I_TypeRef
{
  _Identifier label { get; }
}

public interface I_ForParam<Ttype>
{
  _ObjAlternate As_ObjAlternate { get; }
  _ObjField<Ttype> As_ObjField { get; }
}

public interface I_TypeDual
  : I_TypeObject
{
}

public interface I_DualField
  : I_ObjField
{
}

public interface I_TypeInput
  : I_TypeObject
{
}

public interface I_InputField
  : I_ObjField
{
}

public interface I_InputFieldType
  : I_ObjFieldType
{
  _Value default { get; }
}

public interface I_InputParam
  : I_InputFieldType
{
}

public interface I_TypeOutput
  : I_TypeObject
{
}

public interface I_OutputField
  : I_ObjField
{
}

public interface I_OutputFieldType
  : I_ObjFieldType
{
  _InputParam parameters { get; }
}