// alt
object ObjName { | ObjNameAlt }
object ObjNameAlt { alt: Number | String }

// alt-dual
object ObjName { | ObjDualName }
dual ObjDualName { alt: Number | String }

// alt-mod-Boolean
object ObjName { | ObjNameAlt[^] }
object ObjNameAlt { alt: Number | String }

// alt-mod-param
object ObjName<$mod> { | ObjNameAlt[$mod] }
object ObjNameAlt { alt: Number | String }

// alt-simple
object ObjName { | String }

// field
object ObjName { field: * }

// field-dual
object ObjName { field: ObjNameFld }
dual ObjNameFld { field: Number | String }

// field-mod-Enum
object ObjName { field: *[ObjEnumName] }
enum ObjEnumName { value }

// field-mod-param
object ObjName<$mod> { field: ObjNameFld[$mod] }
object ObjNameFld { field: Number | String }

// field-object
object ObjName { field: ObjNameFld }
object ObjNameFld { field: Number | String }

// field-simple
object ObjName { field: Number }

// generic-alt
object ObjName<$type> { | $type }

// generic-alt-arg
object ObjName<$type> { | ObjNameRef<$type> }
object ObjNameRef<$ref> { | $ref }

// generic-alt-dual
object ObjName { | ObjNameRef<ObjNameAlt> }
object ObjNameRef<$ref> { | $ref }
dual ObjNameAlt { alt: Number | String }

// generic-alt-param
object ObjName { | ObjNameRef<ObjNameAlt> }
object ObjNameRef<$ref> { | $ref }
object ObjNameAlt { alt: Number | String }

// generic-alt-simple
object ObjName { | ObjNameRef<String> }
object ObjNameRef<$ref> { | $ref }

// generic-field
object ObjName<$type> { field: $type }

// generic-field-arg
object ObjName<$type> { field: ObjNameRef<$type> }
object ObjNameRef<$ref> { | $ref }

// generic-field-dual
object ObjName { field: ObjNameRef<ObjNameAlt> }
object ObjNameRef<$ref> { | $ref }
dual ObjNameAlt { alt: Number | String }

// generic-field-param
object ObjName { field: ObjNameRef<ObjNameAlt> }
object ObjNameRef<$ref> { | $ref }
object ObjNameAlt { alt: Number | String }

// generic-parent-arg
object ObjName<$type> { :ObjNameRef<$type> }
object ObjNameRef<$ref> { | $ref }

// generic-parent-dual
object ObjName { :ObjNameRef<ObjNameAlt> }
object ObjNameRef<$ref> { | $ref }
dual ObjNameAlt { alt: Number | String }

// generic-parent-dual-parent
object ObjName { :ObjNameRef<ObjNameAlt> }
object ObjNameRef<$ref> { :$ref }
dual ObjNameAlt { alt: Number | String }

// generic-parent-param
object ObjName { :ObjNameRef<ObjNameAlt> }
object ObjNameRef<$ref> { | $ref }
object ObjNameAlt { alt: Number | String }

// generic-parent-param-parent
object ObjName { :ObjNameRef<ObjNameAlt> }
object ObjNameRef<$ref> { :$ref }
object ObjNameAlt { alt: Number | String }

// generic-param
object ObjName { field: ObjNameRef<ObjNameAlt> }
object ObjNameRef<$ref> { | $ref }
object ObjNameAlt { alt: Number | String }

// generic-dual
object ObjName { field: ObjNameRef<ObjNameAlt> }
object ObjNameRef<$ref> { | $ref }
dual ObjNameAlt { alt: Number | String }

// generic-parent
object ObjName<$type> { :$type }

// input-field-Enum
input InFieldEnum { field: InEnumField = value }
enum InEnumField { value }

// input-field-Number
input InFieldNum { field: Number = 0 }

// input-field-String
input InFieldStr { field: String = '' }

// input-field-null
input InFieldNull { field: InFieldNull? = null }

// output-field-enum
output OutFieldEnum { field = OutEnumField.outEnumField }
enum OutEnumField { outEnumField }

// output-field-enum-parent
output OutFieldParent { field = OutEnumParented.outEnumParent }
enum OutEnumParented { :OutEnumParent outParent ed }
enum OutEnumParent { outEnumParent }

// output-field-value
output OutFieldValue { field = outEnumValue }
enum OutEnumValue { outEnumValue }

// output-generic-enum
output OutGenEnum { | OutGenEnumRef<OutEnumGen.outEnumGen> }
output OutGenEnumRef<$type> { field: $type }
enum OutEnumGen { outEnumGen }

// output-parent-generic
output OutGenParent { | OutGenParentRef<OutParentGen.outGenParent> }
output OutGenParentRef<$type> { field: $type }
enum OutParentGen { :OutPrntendedGen outGenPrntended }
enum OutPrntendedGen { outGenParent }

// output-generic-value
output OutGenValue { | OutGenValueRef<outValueGen> }
output OutGenValueRef<$type> { field: $type }
enum OutValueGen { outValueGen }

// output-param
output OutParam { field(OutParamIn): OutParam }
input OutParamIn { param: Number | String }

// output-param-mod-Domain
output OutParamDomain { field(OutParamDomainIn[OutDomainParam]): OutDomainParam }
input OutParamDomainIn { param: Number | String }
domain OutDomainParam { number 1 ~ 10 }

// output-param-mod-param
output OutParamDomainParam<$mod> { field(OutParamDomainParamIn[$mod]): OutDomainsParam }
input OutParamDomainParamIn { param: Number | String }
domain OutDomainsParam { number 1 ~ 10 }

// output-parent-param
output OutPrntParam { :OutParamParent field(OutPrntParamIn): OutPrntParam }
output OutParamParent { field(OutParamParentIn): OutPrntParam }
input OutPrntParamIn { param: Number | String }
input OutParamParentIn { parent: Number | String }

// parent
object ObjName { :ObjNameRef }
object ObjNameRef { parent: Number | String }

// parent-dual
object ObjName { :ObjNameRef }
dual ObjNameRef { parent: Number | String }

// parent-alt
object ObjName { :ObjNameRef | Number }
object ObjNameRef {  parent: Number | String }

// parent-field
object ObjName { :ObjNameRef field: Number }
object ObjNameRef { parent: Number | String }

// parent-param-diff
object ObjName<$a> { :ObjNameRef<$a> field: $a }
object ObjNameRef<$b> { | $b }

// parent-param-same
object ObjName<$a> { :ObjNameRef<$a> field: $a }
object ObjNameRef<$a> { | $a }
