/* -Simple
enum _DomainKind { Boolean Enum Number String }

output _TypeDomain {
    | _BaseDomain<_DomainKind.Boolean _DomainTrueFalse _DomainItemTrueFalse>
    | _BaseDomain<_DomainKind.Enum _DomainLabel _DomainItemLabel>
    | _BaseDomain<_DomainKind.Number _DomainRange _DomainItemRange>
    | _BaseDomain<_DomainKind.String _DomainRegex _DomainItemRegex>
    }

output _DomainRef<$kind:_DomainKind> {
    : _TypeRef<_TypeKind.Domain>
        domainKind: $kind
    }

output _BaseDomain<$domain:_DomainKind $item:_BaseDomainItem $domainItem:_DomainItem> {
    : _ParentType<_TypeKind.Domain $item $domainItem>
        domainKind: $domain
    }

dual _BaseDomainItem {
    : _Described
        exclude: Boolean
    }

output _DomainItem<$item:_BaseDomainItem> {
    : $item
        domain: _Identifier
    }

output _DomainValue<$kind:_DomainKind $value:_BasicValue> {
    : _DomainRef<$kind>
        value: $value
    | $value
    }

output _BasicValue {
    | Boolean
    | _EnumValue
    | Number
    | String
    }

dual _DomainTrueFalse {
    : _BaseDomainItem
        value: Boolean
    }

output _DomainItemTrueFalse {
    : _DomainItem<_DomainTrueFalse>
    }

output _DomainLabel {
    : _BaseDomainItem
        label: _EnumValue
    }

output _DomainItemLabel {
    : _DomainItem<_DomainLabel>
    }

dual _DomainRange {
    : _BaseDomainItem
        lower: Number?
        upper: Number?
    }

output _DomainItemRange {
    : _DomainItem<_DomainRange>
    }

dual _DomainRegex {
    : _BaseDomainItem
        pattern: String
    }

output _DomainItemRegex {
    : _DomainItem<_DomainRegex>
    }

output _TypeEnum {
    : _ParentType<_TypeKind.Enum _Aliased _EnumLabel>
    }

dual _EnumLabel {
    : _Aliased
        enum: _Identifier
    }

output _EnumValue {
    : _TypeRef<_TypeKind.Enum>
        label: _Identifier
    }

output _TypeUnion {
    : _ParentType<_TypeKind.Union _UnionRef _UnionMember>
    }

output _UnionRef {
    : _TypeRef<_SimpleKind>
    }

output _UnionMember {
    : _UnionRef
        union: _Identifier
    }
*/

// Generated from Spec -Simple for Intf

/*
*/
namespace Components.Gqlp_Spec_Simple;

public interface ICmpt_TypeDomain
{
  _BaseDomain<_DomainKind, _DomainTrueFalse, _DomainItemTrueFalse> As_BaseDomain { get; }
  _BaseDomain<_DomainKind, _DomainLabel, _DomainItemLabel> As_BaseDomain { get; }
  _BaseDomain<_DomainKind, _DomainRange, _DomainItemRange> As_BaseDomain { get; }
  _BaseDomain<_DomainKind, _DomainRegex, _DomainItemRegex> As_BaseDomain { get; }
}

public interface ICmpt_DomainRef<Tkind>
  : ICmpt_TypeRef
{
  Tkind domainKind { get; }
}

public interface ICmpt_BaseDomain<Tdomain,Titem,TdomainItem>
  : ICmpt_ParentType
{
  Tdomain domainKind { get; }
}

public interface ICmpt_BaseDomainItem
  : ICmpt_Described
{
  Boolean exclude { get; }
}

public interface ICmpt_DomainItem<Titem>
  : ICmptitem
{
  _Identifier domain { get; }
}

public interface ICmpt_DomainValue<Tkind,Tvalue>
  : ICmpt_DomainRef
{
  Tvalue value { get; }
  Tvalue Asvalue { get; }
}

public interface ICmpt_BasicValue
{
  _DomainKind As_DomainKind { get; }
  _EnumValue As_EnumValue { get; }
  _DomainKind As_DomainKind { get; }
  _DomainKind As_DomainKind { get; }
}

public interface ICmpt_DomainTrueFalse
  : ICmpt_BaseDomainItem
{
  Boolean value { get; }
}

public interface ICmpt_DomainItemTrueFalse
  : ICmpt_DomainItem
{
}

public interface ICmpt_DomainLabel
  : ICmpt_BaseDomainItem
{
  _EnumValue label { get; }
}

public interface ICmpt_DomainItemLabel
  : ICmpt_DomainItem
{
}

public interface ICmpt_DomainRange
  : ICmpt_BaseDomainItem
{
  Number lower { get; }
  Number upper { get; }
}

public interface ICmpt_DomainItemRange
  : ICmpt_DomainItem
{
}

public interface ICmpt_DomainRegex
  : ICmpt_BaseDomainItem
{
  String pattern { get; }
}

public interface ICmpt_DomainItemRegex
  : ICmpt_DomainItem
{
}

public interface ICmpt_TypeEnum
  : ICmpt_ParentType
{
}

public interface ICmpt_EnumLabel
  : ICmpt_Aliased
{
  _Identifier enum { get; }
}

public interface ICmpt_EnumValue
  : ICmpt_TypeRef
{
  _Identifier label { get; }
}

public interface ICmpt_TypeUnion
  : ICmpt_ParentType
{
}

public interface ICmpt_UnionRef
  : ICmpt_TypeRef
{
}

public interface ICmpt_UnionMember
  : ICmpt_UnionRef
{
  _Identifier union { get; }
}