// bad-parse

// unique-types
enum Test { Value }
output Test { }

// unique-type-alias
enum Test [a] { Value }
output Dup [a] { }

// category-no-output
category { Test }

// category-duplicate
category { Test }
category test { Output }
output Test { }
output Output { }

// category-dup-alias
category [a] { Test }
category [a] { Output }
output Test { }
output Output { }

// category-diff-mods
category { Test }
category { Test? }
output Test { }

// directive-diff-option
directive @Test { all }
directive @Test { ( repeatable ) all }

// directive-no-param
directive @Test(Test) { all }

// directive-diff-parameter
directive @Test(Test) { all }
directive @Test(Test?) { all }
input Test { }

// option-diff-name
option Test { }
option Schema { }

// enum-dup-alias
enum Test [a] { test }
enum Dup [a] { dup }

// enum-parent-diff
enum Test { :Parent test }
enum Test { test }
enum Parent { parent }

// enum-parent-undef
enum Test { :Parent test }

// enum-parent-wrong
enum Test { :Parent test }
output Parent { }

// enum-parent-alias-dup
enum Test { :Parent test[alias] }
enum Parent { parent[alias] }

// scalar-dup-alias
scalar Test [a] { Boolean }
scalar Dup [a] { Boolean }

// scalar-parent-undef
scalar Test { :Parent Boolean }

// scalar-parent-wrong-type
scalar Test { :Parent Boolean }
output Parent { }

// scalar-parent-wrong-kind
scalar Test { :Parent Boolean }
scalar Parent { String }

// scalar-parent-self
scalar Test { :Test Boolean }

// scalar-parent-self-parent
scalar Test { :Parent Boolean }
scalar Parent { :Test Boolean }

// scalar-parent-self-recurse
scalar Test { :Parent Boolean }
scalar Parent { :Recurse Boolean }
scalar Recurse { :Test Boolean }

// scalar-parent-wrong-kind
scalar Test { :Parent Boolean }
scalar Parent { String }

// scalar-diff-kind
scalar Test { string }
scalar Test { number }

// scalar-string-diff
scalar Test { string /a+/}
scalar Test { string !/a+/ }

// scalar-enum-wrong
scalar Test { enum Bad.value }
output Bad { }

// scalar-enum-undef-value
scalar Test { enum Undef.value }

// scalar-enum-undef-member
scalar Test { enum Enum.undef }
enum Enum { value }

// scalar-enum-undef
scalar Test { enum undef }

// scalar-enum-undef-all
scalar Test { enum Undef.* }

// scalar-enum-unique
scalar Test { enum Enum.value Dup.value }
enum Enum { value }
enum Dup { value }

// scalar-enum-unique-member
scalar Test { enum Enum.value Dup.* }
enum Enum { value }
enum Dup { value }

// scalar-enum-unique-all
scalar Test { enum Enum.* Dup.* }
enum Enum { value }
enum Dup { value }

// scalar-union-recurse
scalar Test { union | Bad }
scalar Bad { union | Test }

// scalar-union-more
scalar Test { union | Recurse }
scalar Recurse { union | Bad }
scalar Bad { union | Test }

// scalar-union-self
scalar Test { union | Test }

// scalar-union-undef
scalar Test { union | Bad }

// scalar-union-wrong
scalar Test { union | Bad }
input Bad { }
