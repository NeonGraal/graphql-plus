output _Type = _BaseType<_Kind.Basic>
    | _BaseType<_Kind.Internal>
    | _TypeEnum
    | _TypeObject<_Kind.Input _InputBase _InputField>
    | _TypeObject<_Kind.Output _OutputBase _OutputField>
    | _TypeScalar

output _BaseType<$kind> = _Aliased {
        kind: $kind
    }

enum _Kind = Basic | Enum | Internal | Input | Output | Scalar

output _TypeObject<$kind $base $field> =_BaseType<$kind> {
        parameters: _Named[]
        base: $base?
        fields: $field[]
        alternates: _TypeRef<$base>[]
    }

output _TypeRef<$base> = _BaseType<_Kind.Internal>
    | _TypeSimple
    | $base

output _TypeField<$base> = _Aliased {
      type: _TypeRef<$base>
      modifiers: _TypeModifier[]
    }

output _TypeSimple = _BaseType<_Kind.Basic>
    | _BaseType<_Kind.Scalar>
    | _BaseType<_Kind.Enum>

output _TypeModifier = _BaseModifier<_Modifier.Optional>
    | _BaseModifier<_Modifier.List>
    | _ModifierDictionary

enum _Modifier = Optional | List | ModifierDictionary

output _BaseModifier<$kind> = {
        kind: $kind
    }

output _ModifierDictionary = _BaseModifier<_Modifier.Dictionary> {
        by: _TypeSimple
    }
