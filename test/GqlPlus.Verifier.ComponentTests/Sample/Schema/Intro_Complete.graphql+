output _Schema {
    : _Named
        categories(_CategoryFilter?): _Categories[String]
        directives(_Filter?): _Directives[String]
        types(_TypeFilter?): _Type[String]
        settings(_Filter?): _Setting[String]
    }

input _Filter  {
        names: String[]
        includeReferencedTypes: Boolean = false
    | "Names" String[]
    }

input _CategoryFilter {
    : _Filter
        resolutions: _Resolution[]
    }

input _TypeFilter {
    : _Filter
        kinds: _TypeKind[]
    }

output _Aliased {
    : _Named
        aliases: String[]
    }

output _Named {
        name: String
        description: String?
    }
output _Categories {
    | _Category
    | _Type
}

output _Category {
    : _Aliased
        resolution: _Resolution
        output: String
        modifiers: _Modifier[]
    }

enum _Resolution { Parallel Sequential Single }
output _Directives {
    | _Directive
    | _Type
}

output _Directive {
    : _Aliased
        parameters: _Parameter[]
        repeatable: Boolean
        locations: _[_Location]
    }

enum _Location { Operation Variable Field Inline Spread Fragment }

output _Setting {
    : _Named
        value: _Constant
}
output _Type {
    | _BaseType<_TypeKind.Basic>
    | _BaseType<_TypeKind.Internal>
    | _TypeEnum
    | _TypeObject<_TypeKind.Input _InputBase _InputField>
    | _TypeObject<_TypeKind.Output _OutputBase _OutputField>
    | _TypeScalar
    }

output _BaseType<$kind> {
    : _Aliased
        kind: $kind
    }

enum _TypeKind { Basic Enum Internal Input Output Scalar }

output _TypeSimple {
    | _BaseType<_TypeKind.Basic>
    | _BaseType<_TypeKind.Scalar>
    | _BaseType<_TypeKind.Enum>
    }
output _Constant {
        enum: _BaseType<_TypeKind.Enum>
        value: String
    | Internal
    | Simple
    | _ConstantList
    | _ConstantMap
    }

output _ConstantList {
    | _Constant[]
    }

output _ConstantMap {
    | _Constant[Simple]
    }

output _Collection {
    | _BaseModifier<_ModifierKind.List>
    | _ModifierDictionary
    }

output _Modifier {
    | _BaseModifier<_ModifierKind.Optional>
    | _Collection
    }

enum _ModifierKind { Optional List Dictionary }

output _BaseModifier<$kind> {
        kind: $kind
    }

output _ModifierDictionary {
    : _BaseModifier<_ModifierKind.Dictionary>
        by: _TypeSimple
    }
output _TypeEnum {
    : _BaseType<_TypeKind.Enum>
        base: String?
        values: _Aliased[]
        allValues: _EnumValue[]
    }

output _EnumValue {
    : _Aliased
        enum: String
    }
enum _Scalar { Number String Union }

output _TypeScalar {
    | _ScalarNumber
    | _ScalarString
    | _ScalarUnion
    }

output _BaseScalar<$base> {
    : _BaseType<_TypeKind.Scalar>
        base: $base
    }

output _ScalarNumber {
    : _BaseScalar<_Scalar.Number>
        ranges: _ScalarRange[]
    }

output _ScalarRange {
        from: Number?
        fromInclusive: Boolean
        to: Number?
        toInclusive: Boolean
    }

output _ScalarString {
    : _BaseScalar<_Scalar.String>
        regexes: _ScalarRegex[]
    }

output _ScalarRegex {
        regex: String
        exclude: Boolean
    }

output _ScalarUnion {
    : _BaseScalar<_Scalar.Union>
        references: _TypeSimple[]
    }
output _TypeObject<$kind $base $field> {
    : _BaseType<$kind>
        base: $base?
        typeParameters: _Named[]
        fields: $field[]
        alternates: _Alternate<$base>[]
        allTypeParameters: _Object<_Named>[]
        allFields: _Object<$field>[]
        allAlternates: _Object<_Alternate<$base>>[]
    }

output _Ref<$base> {
    | _BaseType<_TypeKind.Internal>
    | _TypeSimple
    | $base
    }

output _Alternate<$base> {
      type: _Ref<$base>
      collections: _Collection[]
    }

output _Object<$for> {
    : $for
        object: String
    }

output _Field<$base> {
    : _Aliased
      type: _Ref<$base>
      modifiers: _Modifier[]
    }

output _Parameter {
    : _Alternate<_InputBase>
        default: _Constant?
    }
output _InputBase {
        input: String
        arguments: _Ref<_InputBase>[]
    | "TypeParameter" String
    }

output _InputField {
    : _Field<_InputBase>
        default: _Constant?
    }
output _OutputBase {
        output: String
        arguments: _OutputArgument[]
    | "TypeParameter" String
    }

output _OutputField {
    : _Field<_OutputBase>
        parameter: _Parameter[]
    | _OutputEnum
    }

output _OutputArgument {
    : _BaseType<_TypeKind.Enum>
        value: String
    | _Ref<_OutputBase>
    }

output _OutputEnum {
    : _BaseType<_TypeKind.Enum>
        field: String
        value: String
    }
