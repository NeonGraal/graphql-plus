<#@ output extension=".gen.cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="System.Core" #><#+
private IDictionary<string,string> TestData(FileInfo file) {
  var result = new Dictionary<string, string>();
  var test = "";
  var line = "";

  using var tests = file.OpenText();

  while ((line = tests.ReadLine()) != null) {
    if (line.StartsWith("// ")) {
      test = line.Substring(3);
      result[test] = "";
    } else {
      result[test] = (result[test] + " " + line).Trim();
    }
  }

  return result;
}

private void BuildData(string directory) {
  var samplesDir = new DirectoryInfo(this.Host.ResolvePath("Samples"));
  var filesDir = samplesDir.GetDirectories(directory)[0];
  var index = filesDir.FullName.IndexOf("test") - 1;
  var relative = "." + filesDir.FullName.Substring(index);
  var gitFile = samplesDir.GetFiles("git-details.txt")[0];
  string gitDetails;
  using (var gitText = gitFile.OpenText()) {
    gitDetails = gitText.ReadToEnd();
  }#>
// Generated from <#= relative #>
// Collected from <#= gitDetails #>

namespace GqlPlus;
<#+  foreach (var dir in filesDir.EnumerateDirectories().OrderBy(d => d.Name)) {
      var fileName = dir.Name;
#>

public class <#= directory + fileName #>Data
  : TheoryData<string>
{
  public static readonly Dictionary<string, string> Source = new() {
<#+   foreach (var file in dir.EnumerateFiles("*.g*").OrderBy(f => f.Name)) {
        var test = Path.ChangeExtension(file.Name, null);
        string data;
        using (var text = file.OpenText()) {
          data = text.ReadToEnd()
            .Replace("\r", "")
            .Replace("\n", " ")
            .Replace("\\", "\\\\")
            .Replace("\"", "\\\"")
            .Trim();
        }#>
    ["<#= test #>"] = "<#= data #>",
<#+    } // foreach file
#>
  };

  public <#= directory + fileName #>Data()
  {
    foreach (string key in Source.Keys) {
      Add(key);
    }
  }
}
<#+  } // foreach dir
}
#>
