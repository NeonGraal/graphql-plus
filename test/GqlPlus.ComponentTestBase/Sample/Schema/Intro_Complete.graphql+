output _Schema {
    : _Named
        categories(_CategoryFilter?): _Categories[_Identifier]
        directives(_Filter?): _Directives[_Identifier]
        types(_TypeFilter?): _Type[_Identifier]
        settings(_Filter?): _Setting[_Identifier]
    }

domain _Identifier { String /[A-Za-z_]+/ }

input _Filter  {
        names: _NameFilter[]
        matchAliases: Boolean? = true
        aliases: _NameFilter[]
        returnByAlias: Boolean? = false
        returnReferencedTypes: Boolean? = false
    | _NameFilter[]
    }

"_NameFilter is a simple match expression against _Identifier  where '.' matches any single character and '*' matches zero or more of any character."
domain _NameFilter { String /[A-Za-z_.*]+/ }

input _CategoryFilter {
    : _Filter
        resolutions: _Resolution[]
    }

input _TypeFilter {
    : _Filter
        kinds: _TypeKind[]
    }
dual _Aliased {
    : _Described
        aliases: _Identifier[]
    }

dual _Described {
    : _Named
        description: String
    }

dual _Named {
        name: _Identifier
    }
output _Categories {
        category: _Category
        type: _Type
    | _Category
    | _Type
}

output _Category {
    : _Aliased
        resolution: _Resolution
        output: _TypeRef<_TypeKind.Output>
        modifiers: _Modifiers[]
    }

enum _Resolution { Parallel Sequential Single }
output _Directives {
        directive: _Directive
        type: _Type
    | _Directive
    | _Type
}

output _Directive {
    : _Aliased
        parameters: _InputParameter[]
        repeatable: Boolean
        locations: _[_Location]
    }

enum _Location { Operation Variable Field Inline Spread Fragment }

output _Setting {
    : _Described
        value: _Constant
}
output _Type {
    | _BaseType<_TypeKind.Basic>
    | _BaseType<_TypeKind.Internal>
    | _TypeDual
    | _TypeEnum
    | _TypeInput
    | _TypeOutput
    | _TypeDomain
    | _TypeUnion
    }

output _BaseType<$kind> {
    : _Aliased
        typeKind: $kind
    }

output _ChildType<$kind $parent> {
    : _BaseType<$kind>
        parent: $parent
    }

output _ParentType<$kind $item $allItem> {
    : _ChildType<$kind _Identifier>
        items: $item[]
        allItems: $allItem[]
    }

enum _SimpleKind { Basic Enum Internal Domain Union }

enum _TypeKind { :_SimpleKind Dual Input Output }

output _TypeRef<$kind> {
        typeKind: $kind
        name: _Identifier
}

output _TypeSimple {
    | _TypeRef<_TypeKind.Basic>
    | _TypeRef<_TypeKind.Enum>
    | _TypeRef<_TypeKind.Domain>
    | _TypeRef<_TypeKind.Union>
    }
output _Constant {
    | _Simple
    | _ConstantList
    | _ConstantMap
    }

output _Simple {
    | Boolean
    | _DomainValue<_DomainKind.Number Number>
    | _DomainValue<_DomainKind.String String>
    | _EnumValue
}

output _ConstantList {
    | _Constant[]
    }

output _ConstantMap {
    | _Constant[Simple]
    }

output _Collections {
    | _Modifier<_ModifierKind.List>
    | _ModifierKeyed<_ModifierKind.Dictionary>
    | _ModifierKeyed<_ModifierKind.TypeParameter>
    }

output _ModifierKeyed<$kind> {
    : _Modifier<$kind>
        by: _TypeSimple
        optional: Boolean
    }

output _Modifiers {
    | _Modifier<_ModifierKind.Optional>
    | _Collections
    }

enum _ModifierKind { Opt[Optional] List Dict[Dictionary] Param[TypeParameter] }

output _Modifier<$kind> {
        modifierKind: $kind
    }
enum _DomainKind { Boolean Enum Number String }

output _TypeDomain {
    | _BaseDomain<_DomainKind.Boolean _DomainTrueFalse>
    | _BaseDomain<_DomainKind.Enum _DomainMember>
    | _BaseDomain<_DomainKind.Number _DomainRange>
    | _BaseDomain<_DomainKind.String _DomainRegex>
    }

output _DomainRef<$kind> {
    : _TypeRef<_TypeKind.Domain>
        domainKind: $kind
    }

output _BaseDomain<$domain $item> {
    : _ParentType<_TypeKind.Domain $item _DomainItem<$item>>
        domain: $domain
    }

dual _BaseDomainItem {
        exclude: Boolean
    }

dual _DomainItem<$item> {
    : $item
        domain: _Identifier
    }

output _DomainValue<$kind $value> {
    : _DomainRef<$kind>
        value: $value
    }
dual _DomainTrueFalse {
    : _BaseDomainItem
        value: Boolean
    }
output _DomainMember {
    : _BaseDomainItem
        value: _EnumValue
    }
dual _DomainRange {
    : _BaseDomainItem
        lower: Number?
        upper: Number?
    }
dual _DomainRegex {
    : _BaseDomainItem
        pattern: String
    }
output _TypeEnum {
    : _ParentType<_TypeKind.Enum _Aliased _EnumMember>
    }

dual _EnumMember {
    : _Aliased
        enum: _Identifier
    }

output _EnumValue {
    : _TypeRef<_TypeKind.Enum>
        member: _Identifier
    }
output _TypeUnion {
    : _ParentType<_TypeKind.Union _Named _UnionMember>
    }

dual _UnionMember {
    : _Named
        union: _Identifier
    }
output _TypeObject<$kind $base $field> {
    : _ChildType<$kind _ObjDescribed<$base>>
        typeParameters: _Described[]
        fields: $field[]
        alternates: _Alternate<$base>[]
        allFields: _ObjectFor<$field>[]
        allAlternates: _ObjectFor<_Alternate<$base>>[]
    }

dual _ObjDescribed<$base> {
        base: $base
        description: String
    | $base
    }

output _ObjType<$base> {
    | _BaseType<_TypeKind.Internal>
    | _TypeSimple
    | $base
    }

dual _ObjBase {
        typeArguments: _ObjDescribed<_ObjArgument>[]
    | _TypeParameter
    }

output _ObjArgument {
    : _TypeRef<TypeKind>
    | _TypeParameter
}

domain _TypeParameter { :_Identifier String }

output _Alternate<$base> {
      type: _ObjDescribed<$base>
      collections: _Collections[]
    }

output _ObjectFor<$for> {
    : $for
        object: _Identifier
    }

output _Field<$base> {
    : _Aliased
      type: _ObjDescribed<$base>
      modifiers: _Modifiers[]
    }
output _TypeDual {
    : _TypeObject<_TypeKind.Dual _DualBase _Field<_DualBase>>
    }

output _DualBase {
    : _ObjBase
        dual: _Identifier
    }
output _TypeInput {
    : _TypeObject<_TypeKind.Input _InputBase _InputField>
    }

output _InputBase {
    : _ObjBase
        input: _Identifier
    | _DualBase
    }

output _InputField {
    : _Field<_InputBase>
        default: _Constant?
    }

output _InputParameter {
    : _ObjDescribed<_InputBase>
        modifiers: _Modifiers[]
        default: _Constant?
    }
output _TypeOutput {
    : _TypeObject<_TypeKind.Output _OutputBase _OutputField>
    }

output _OutputBase {
    : _ObjBase
        output: _Identifier
    | _DualBase
    }

output _OutputField {
    : _Field<_OutputBase>
        parameter: _InputParameter[]
    | _OutputEnum
    }

output _OutputArgument {
    : _TypeRef<TypeKind>
        member: _Identifier?
    | _TypeParameter
    }

output _OutputEnum {
    : _TypeRef<_TypeKind.Enum>
        field: _Identifier
        member: _Identifier
    }
