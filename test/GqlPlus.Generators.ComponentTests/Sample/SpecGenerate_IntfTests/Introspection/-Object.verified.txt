/* -Object
domain _ObjectKind { enum _TypeKind.Dual _TypeKind.Input _TypeKind.Output }

output _TypeObject<$kind:_ObjectKind $field:_ObjField> {
    : _ChildType<$kind _ObjBase>
        typeParams: _ObjTypeParam[]
        fields: $field[]
        alternates: _ObjAlternate[]
        allFields: _ObjectFor<$field>[]
        allAlternates: _ObjectFor<_ObjAlternate>[]
    }

output _ObjTypeParam {
    : _Named
        constraint: _TypeRef<_TypeKind>
    }

output _ObjBase {
    : _Named
        typeArgs: _ObjTypeArg[]
    | _TypeParam
    }

output _ObjTypeArg {
    : _TypeRef<_TypeKind>
        label: _Identifier?
    | _TypeParam
    }

output _TypeParam {
    : _Described
        typeParam: _Identifier
    }

output _ObjAlternate {
      type: _ObjBase
      collections: _Collections[]
    | _ObjAlternateEnum
    }

output _ObjAlternateEnum {
    : _TypeRef<_TypeKind.Enum>
        label: _Identifier
    }
output _ObjectFor<$for:_ForParam> {
    : $for
        object: _Identifier
    }

output _ObjField<$type:_ObjFieldType> {
    : _Aliased
      type: $type
    }

output _ObjFieldType {
    : _ObjBase
        modifiers: _Modifiers[]
    | _ObjFieldEnum
    }

output _ObjFieldEnum {
    : _TypeRef<_TypeKind.Enum>
        label: _Identifier
    }

output _ForParam<$type:_ObjFieldType> {
    | _ObjAlternate
    | _ObjField<$type>
    }

output _TypeDual {
    : _TypeObject<_TypeKind.Dual _DualField>
    }

output _DualField {
    : _ObjField<_ObjFieldType>
    }

output _TypeInput {
    : _TypeObject<_TypeKind.Input _InputField>
    }

output _InputField {
    : _ObjField<_InputFieldType>
    }

output _InputFieldType {
    : _ObjFieldType
        default: Value?
    }

output _InputParam {
    : _InputFieldType
    }

output _TypeOutput {
    : _TypeObject<_TypeKind.Output _OutputField>
    }

output _OutputField {
    : _ObjField<_ObjFieldType>
    }

output _OutputFieldType {
    : _ObjFieldType
        parameters: _InputParam[]
    }
*/

// Generated from Spec -Object for Intf

/*
*/
namespace Components.Gqlp_Spec_Object;

public interface ICmpt_ObjectKind
{
}

public interface ICmpt_TypeObject<Tkind,Tfield>
  : ICmpt_ChildType
{
  _ObjTypeParam typeParams { get; }
  Tfield fields { get; }
  _ObjAlternate alternates { get; }
  _ObjectFor<Tfield> allFields { get; }
  _ObjectFor<_ObjAlternate> allAlternates { get; }
}

public interface ICmpt_ObjTypeParam
  : ICmpt_Named
{
  _TypeRef<_TypeKind> constraint { get; }
}

public interface ICmpt_ObjBase
  : ICmpt_Named
{
  _ObjTypeArg typeArgs { get; }
  _TypeParam As_TypeParam { get; }
}

public interface ICmpt_ObjTypeArg
  : ICmpt_TypeRef
{
  _Identifier label { get; }
  _TypeParam As_TypeParam { get; }
}

public interface ICmpt_TypeParam
  : ICmpt_Described
{
  _Identifier typeParam { get; }
}

public interface ICmpt_ObjAlternate
{
  _ObjBase type { get; }
  _Collections collections { get; }
  _ObjAlternateEnum As_ObjAlternateEnum { get; }
}

public interface ICmpt_ObjAlternateEnum
  : ICmpt_TypeRef
{
  _Identifier label { get; }
}

public interface ICmpt_ObjectFor<Tfor>
  : ICmptfor
{
  _Identifier object { get; }
}

public interface ICmpt_ObjField<Ttype>
  : ICmpt_Aliased
{
  Ttype type { get; }
}

public interface ICmpt_ObjFieldType
  : ICmpt_ObjBase
{
  _Modifiers modifiers { get; }
  _ObjFieldEnum As_ObjFieldEnum { get; }
}

public interface ICmpt_ObjFieldEnum
  : ICmpt_TypeRef
{
  _Identifier label { get; }
}

public interface ICmpt_ForParam<Ttype>
{
  _ObjAlternate As_ObjAlternate { get; }
  _ObjField<Ttype> As_ObjField { get; }
}

public interface ICmpt_TypeDual
  : ICmpt_TypeObject
{
}

public interface ICmpt_DualField
  : ICmpt_ObjField
{
}

public interface ICmpt_TypeInput
  : ICmpt_TypeObject
{
}

public interface ICmpt_InputField
  : ICmpt_ObjField
{
}

public interface ICmpt_InputFieldType
  : ICmpt_ObjFieldType
{
  _Value default { get; }
}

public interface ICmpt_InputParam
  : ICmpt_InputFieldType
{
}

public interface ICmpt_TypeOutput
  : ICmpt_TypeObject
{
}

public interface ICmpt_OutputField
  : ICmpt_ObjField
{
}

public interface ICmpt_OutputFieldType
  : ICmpt_ObjFieldType
{
  _InputParam parameters { get; }
}