output _Schema {
    : _Named
        categories(_CategoryFilter?): _Categories[Identifier]
        directives(_Filter?): _Directives[Identifier]
        types(_TypeFilter?): _Type[Identifier]
        settings(_Filter?): _Setting[Identifier]
    }

scalar Identifier { String /[A-Za-z_]+/ }

input _Filter  {
        names: String[]
        includeReferencedTypes: Boolean = false
    | "Names" String[]
    }

input _CategoryFilter {
    : _Filter
        resolutions: _Resolution[]
    }

input _TypeFilter {
    : _Filter
        kinds: _TypeKind[]
    }

output _Aliased {
    : _Described<_Named>
        aliases: Identifier[]
    }

output _Described<$base> {
    : $base
        description: String?
    }

output _Named {
        name: Identifier
    }
output _Categories {
    | _Category
    | _Type
}

output _Category {
    : _Aliased
        resolution: _Resolution
        output: _TypeRef<_TypeKind.Output>
        modifiers: _Modifier[]
    }

enum _Resolution { Parallel Sequential Single }
output _Directives {
    | _Directive
    | _Type
}

output _Directive {
    : _Aliased
        parameters: _Parameter[]
        repeatable: Boolean
        locations: _[_Location]
    }

enum _Location { Operation Variable Field Inline Spread Fragment }

output _Setting {
    : _Described<_Named>
        value: _Constant
}
output _Type {
    | _BaseType<_TypeKind.Basic>
    | _BaseType<_TypeKind.Internal>
    | _TypeEnum
    | _TypeObject<_TypeKind.Input _InputBase _InputField>
    | _TypeObject<_TypeKind.Output _OutputBase _OutputField>
    | _TypeScalar
    }

output _BaseType<$kind> {
    : _Aliased
        kind: $kind
    }

output _ChildType<$kind $parent> {
    : _BaseType<$kind>
        parent: $parent
    }

enum _SimpleKind { Basic Enum Internal Scalar }

enum _TypeKind { :_SimpleKind Input Output }

output _TypeRef<$kind> {
        kind: $kind
        name: Identifier
}

output _TypeSimple {
    | _TypeRef<_TypeKind.Basic>
    | _TypeRef<_TypeKind.Scalar>
    | _TypeRef<_TypeKind.Enum>
    }
output _Constant {
    | _Simple
    | _ConstantList
    | _ConstantMap
    }

output _Simple {
    | Boolean
    | _ScalarValue<_Scalar.Number Number>
    | _ScalarValue<_Scalar.String String>
    | _EnumValue
}

output _ConstantList {
    | _Constant[]
    }

output _ConstantMap {
    | _Constant[Simple]
    }

output _Collection {
    | _BaseModifier<_ModifierKind.List>
    | _ModifierDictionary
    }

output _Modifier {
    | _BaseModifier<_ModifierKind.Optional>
    | _Collection
    }

enum _ModifierKind { Optional List Dictionary }

output _BaseModifier<$kind> {
        kind: $kind
    }

output _ModifierDictionary {
    : _BaseModifier<_ModifierKind.Dictionary>
        by: _TypeSimple
    }
output _TypeEnum {
    : _ChildType<_TypeKind.Enum Identifier>
        members: _Aliased[]
        allMembers: _EnumMember[]
    }

output _EnumMember {
    : _Aliased
        enum: Identifier
    }

output _EnumValue {
    : _TypeRef<_TypeKind.Enum>
        value: Identifier
    }
enum _Scalar { Boolean Enum Number String Union }

output _TypeScalar {
    | _BaseScalar<_Scalar.Boolean _ScalarBoolean>
    | _BaseScalar<_Scalar.Enum _ScalarEnum>
    | _BaseScalar<_Scalar.Number _ScalarRange>
    | _BaseScalar<_Scalar.String _ScalarRegex>
    | _BaseScalar<_Scalar.Union _TypeSimple>
    }

output _ScalarRef<$kind> {
    : _TypeRef<_TypeKind.Scalar>
        scalar: $kind
    }

output _BaseScalar<$kind $item> {
    : _ChildType<_TypeKind.Scalar Identifier>
        scalar: $kind
        items: $item[]
        allItems: _ScalarItem<$item>[]
    }

output _BaseScalarItem {
        exclude: Boolean
    }

output _ScalarBoolean {
    }

output _ScalarEnum {
    : _BaseScalarItem
        member: _EnumValue
    }

output _ScalarRange {
    : _BaseScalarItem
        from: Number?
        to: Number?
    }

output _ScalarRegex {
    : _BaseScalarItem
        regex: String
    }

output _ScalarItem<$item> {
    : $item
        scalar: Identifier
    }

output _ScalarValue<$kind $value> {
    : _ScalarRef<$kind>
        value: $value
    }
output _TypeObject<$kind $base $field> {
    : _ChildType<$kind _Described<$base>>
        typeParameters: _Described<_Named>[]
        fields: $field[]
        alternates: _Alternate<$base>[]
        allTypeParameters: _Object<_Described<_Named>>[]
        allFields: _Object<$field>[]
        allAlternates: _Object<_Alternate<$base>>[]
    }

output _Ref<$base> {
    | _BaseType<_TypeKind.Internal>
    | _TypeSimple
    | $base
    }

output _TypeBase<$arg> {
        arguments: $arg[]
    | "TypeParameter" Identifier
    }

output _Alternate<$base> {
      type: _Ref<$base>
      collections: _Collection[]
    }

output _Object<$for> {
    : $for
        object: Identifier
    }

output _Field<$base> {
    : _Aliased
      type: _Ref<$base>
      modifiers: _Modifier[]
    }

output _Parameter {
    : _Alternate<_InputBase>
        default: _Constant?
    }
output _InputBase {
    : _TypeBase<_Ref<_InputBase>>
        input: Identifier
    }

output _InputField {
    : _Field<_InputBase>
        default: _Constant?
    }
output _OutputBase {
    : _TypeBase<_OutputArgument>
        output: Identifier
    }

output _OutputField {
    : _Field<_OutputBase>
        parameter: _Parameter[]
    | _OutputEnum
    }

output _OutputArgument {
    : _TypeRef<_TypeKind.Enum>
        value: Identifier
    | _Ref<_OutputBase>
    }

output _OutputEnum {
    : _TypeRef<_TypeKind.Enum>
        field: Identifier
        value: Identifier
    }
