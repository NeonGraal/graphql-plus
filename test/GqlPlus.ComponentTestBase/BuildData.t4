<#@ output extension=".gen.cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="System.Core" #><#+
private void BuildData(string directory)
  => BuildData(directory, directory);

private void BuildData(string directory, string prefix) {
  var samplesDir = new DirectoryInfo(this.Host.ResolvePath("Samples"));
  var filesDir = samplesDir;
  if (!string.IsNullOrWhiteSpace(directory)) {
    filesDir = samplesDir.GetDirectories(directory)[0];
  }
  var index = filesDir.FullName.IndexOf("test") - 1;
  var relative = "." + filesDir.FullName.Substring(index);
  var gitFile = samplesDir.GetFiles("git-details.txt")[0];
  string gitDetails;
  using (var gitText = gitFile.OpenText()) {
    gitDetails = gitText.ReadToEnd().Trim();
  }#>
// Generated from <#= relative #>
// Collected from <#= gitDetails #>

namespace GqlPlus;
<#+  foreach (var dir in filesDir.EnumerateDirectories().OrderBy(d => d.Name)) {
      var fileName = dir.Name;
#>

public class <#= prefix + fileName #>Data
  : TheoryData<string>
{
  public <#= prefix + fileName #>Data()
  {
<#+   foreach (var file in dir.EnumerateFiles("*.g*").OrderBy(f => f.Name)) {
        var test = Path.ChangeExtension(file.Name, null);#>
    Add("<#= test #>");
<#+    } // foreach file
#>
  }
}
<#+  } // foreach dir
}
#>
