/* Intro_+Object
domain _ObjectKind { enum _TypeKind.Dual _TypeKind.Input _TypeKind.Output }

output _TypeObject<$kind:_ObjectKind $parent:_ObjBase
            $typeParam:_ObjTypeParam $field:_Field $alternate:_Alternate> {
    : _ChildType<$kind $parent>
        typeParams: $typeParam[]
        fields: $field[]
        alternates: $alternate[]
        allFields: _ObjectFor<$field>[]
        allAlternates: _ObjectFor<$alternate>[]
    }

output _ObjTypeParam<$kind:_ObjectKind> {
    : _Named
        constraint: _ObjConstraint<$kind>
    }

output _ObjConstraint<$kind:_ObjectKind> {
    : _TypeRef<$kind>
    }

output _ObjBase<$arg:_ObjTypeArg> {
    : _Named
        typeArgs: $arg[]
    | _TypeParam
    }

output _ObjTypeArg {
    : _TypeRef<_TypeKind>
    | _TypeParam
    }

output _TypeParam {
    : _Named
        typeParam: _Identifier
    }

output _Alternate<$base:_ObjBase> {
      type: $base
      collections: _Collections[]
    }

output _ObjectFor<$for:_ForParam> {
    : $for
        object: _Identifier
    }

output _Field<$base:_ObjBase> {
    : _Aliased
      type: $base
      modifiers: _Modifiers[]
    }

output _ForParam<$base:_ObjBase> {
    | _Alternate<$base>
    | _Field<$base>
    }

output _TypeDual {
    : _TypeObject<_TypeKind.Dual _DualBase _DualTypeParam _DualField _DualAlternate>
    }

output _DualBase {
    : _ObjBase<_DualTypeArg>
    }

output _DualTypeParam {
    : _ObjTypeParam<_TypeKind.Dual>
    }

output _DualField {
    : _Field<_DualBase>
    }

output _DualAlternate {
    : _Alternate<_DualBase>
    }

output _DualTypeArg {
    : _ObjTypeArg
    }

output _TypeInput {
    : _TypeObject<_TypeKind.Input _InputBase _InputTypeParam _InputField _InputAlternate>
    }

output _InputBase {
    : _ObjBase<_InputTypeArg>
    | _DualBase
    }

output _InputTypeParam {
    : _ObjTypeParam<_TypeKind.Input>
    | _TypeRef<_TypeKind.Dual>
    }

output _InputField {
    : _Field<_InputBase>
        default: _Constant?
    }

output _InputAlternate {
    : _Alternate<_InputBase>
    }

output _InputTypeArg {
    : _ObjTypeArg
    }

output _InputParam {
    : _InputBase
        modifiers: _Modifiers[]
        default: _Constant?
    }

output _TypeOutput {
    : _TypeObject<_TypeKind.Output _OutputBase _OutputTypeParam _OutputField _OutputAlternate>
    }

output _OutputBase {
    : _ObjBase<_OutputTypeArg>
    | _DualBase
    }

output _OutputTypeParam {
    : _ObjTypeParam<_TypeKind.Output>
    | _TypeRef<_TypeKind.Dual>
    | _TypeRef<_TypeKind.Enum>
    }

output _OutputField {
    : _Field<_OutputBase>
        parameters: _InputParam[]
    | _OutputEnum
    }

output _OutputAlternate {
    : _Alternate<_OutputBase>
    }

output _OutputTypeArg {
    : _ObjTypeArg
        label: _Identifier?
    }

output _OutputEnum {
    : _TypeRef<_TypeKind.Enum>
        field: _Identifier
        label: _Identifier
    }
*/

// Generated from Spec Intro_+Object for Impl

/*
*/
namespace GqlPlus.Gqlp_Spec_Intro__Object;

public class Domain_ObjectKind
  : I_ObjectKind
{
}

public class Output_TypeObject<Tkind,Tparent,TtypeParam,Tfield,Talternate>
  : Output_ChildType
  , I_TypeObject<Tkind,Tparent,TtypeParam,Tfield,Talternate>
{
  public TtypeParam typeParams { get; set; }
  public Tfield fields { get; set; }
  public Talternate alternates { get; set; }
  public _ObjectFor<Tfield> allFields { get; set; }
  public _ObjectFor<Talternate> allAlternates { get; set; }
}

public class Output_ObjTypeParam<Tkind>
  : Output_Named
  , I_ObjTypeParam<Tkind>
{
  public _ObjConstraint<Tkind> constraint { get; set; }
}

public class Output_ObjConstraint<Tkind>
  : Output_TypeRef
  , I_ObjConstraint<Tkind>
{
}

public class Output_ObjBase<Targ>
  : Output_Named
  , I_ObjBase<Targ>
{
  public Targ typeArgs { get; set; }
  public _TypeParam As_TypeParam { get; set; }
}

public class Output_ObjTypeArg
  : Output_TypeRef
  , I_ObjTypeArg
{
  public _TypeParam As_TypeParam { get; set; }
}

public class Output_TypeParam
  : Output_Named
  , I_TypeParam
{
  public _Identifier typeParam { get; set; }
}

public class Output_Alternate<Tbase>
  : I_Alternate<Tbase>
{
  public Tbase type { get; set; }
  public _Collections collections { get; set; }
}

public class Output_ObjectFor<Tfor>
  : Outputfor
  , I_ObjectFor<Tfor>
{
  public _Identifier object { get; set; }
}

public class Output_Field<Tbase>
  : Output_Aliased
  , I_Field<Tbase>
{
  public Tbase type { get; set; }
  public _Modifiers modifiers { get; set; }
}

public class Output_ForParam<Tbase>
  : I_ForParam<Tbase>
{
  public _Alternate<Tbase> As_Alternate { get; set; }
  public _Field<Tbase> As_Field { get; set; }
}

public class Output_TypeDual
  : Output_TypeObject
  , I_TypeDual
{
}

public class Output_DualBase
  : Output_ObjBase
  , I_DualBase
{
}

public class Output_DualTypeParam
  : Output_ObjTypeParam
  , I_DualTypeParam
{
}

public class Output_DualField
  : Output_Field
  , I_DualField
{
}

public class Output_DualAlternate
  : Output_Alternate
  , I_DualAlternate
{
}

public class Output_DualTypeArg
  : Output_ObjTypeArg
  , I_DualTypeArg
{
}

public class Output_TypeInput
  : Output_TypeObject
  , I_TypeInput
{
}

public class Output_InputBase
  : Output_ObjBase
  , I_InputBase
{
  public _DualBase As_DualBase { get; set; }
}

public class Output_InputTypeParam
  : Output_ObjTypeParam
  , I_InputTypeParam
{
  public _TypeRef<_TypeKind> As_TypeRef { get; set; }
}

public class Output_InputField
  : Output_Field
  , I_InputField
{
  public _Constant default { get; set; }
}

public class Output_InputAlternate
  : Output_Alternate
  , I_InputAlternate
{
}

public class Output_InputTypeArg
  : Output_ObjTypeArg
  , I_InputTypeArg
{
}

public class Output_InputParam
  : Output_InputBase
  , I_InputParam
{
  public _Modifiers modifiers { get; set; }
  public _Constant default { get; set; }
}

public class Output_TypeOutput
  : Output_TypeObject
  , I_TypeOutput
{
}

public class Output_OutputBase
  : Output_ObjBase
  , I_OutputBase
{
  public _DualBase As_DualBase { get; set; }
}

public class Output_OutputTypeParam
  : Output_ObjTypeParam
  , I_OutputTypeParam
{
  public _TypeRef<_TypeKind> As_TypeRef { get; set; }
  public _TypeRef<_TypeKind> As_TypeRef { get; set; }
}

public class Output_OutputField
  : Output_Field
  , I_OutputField
{
  public _InputParam parameters { get; set; }
  public _OutputEnum As_OutputEnum { get; set; }
}

public class Output_OutputAlternate
  : Output_Alternate
  , I_OutputAlternate
{
}

public class Output_OutputTypeArg
  : Output_ObjTypeArg
  , I_OutputTypeArg
{
  public _Identifier label { get; set; }
}

public class Output_OutputEnum
  : Output_TypeRef
  , I_OutputEnum
{
  public _Identifier field { get; set; }
  public _Identifier label { get; set; }
}