// alts-diff-mods
object Test { | Test1 }
object Test { | Test1[] }
object Test1 { }

// alts-mods-undef
object Test { | Alt[Scalar] }
object Alt { }

// alts-mods-wrong
object Test { | Alt[Test] }
object Alt { }

// alts-more
object Test { | Recurse }
object Recurse { | More }
object More { | Test }

// alts-recurse
object Test { | Recurse }
object Recurse { | Test }

// alts-self
object Test { | Test }

// fields-alias
object Test { field1[alias]: Test }
object Test { field2[alias]: Test[] }

// fields-diff-mods
object Test { field: Test }
object Test { field: Test[] }

// fields-diff-type
object Test { field: Test }
object Test { field: Test1 }
object Test1 { }

// fields-mods-undef
object Test { field: Test[Random] }

// fields-mods-wrong
object Test { field: Test[Test] }

// generic-alt-undef
object Test { | $type }

// generic-arg-less
object Test { field: Ref }
object Ref<$ref> { | $ref }

// generic-arg-more
object Test<$type> { field: Ref<$type> }
object Ref { }

// generic-arg-undef
object Test { field: Ref<$type> }
object Ref<$ref> { | $ref }

// generic-field-undef
object Test { field: $type }

// generic-param-undef
object Test { field: Ref<Test1> }
object Ref<$ref> { | $ref }

// generic-parent-less
object Test { :Ref }
object Ref<$ref> { | $ref }

// generic-parent-more
object Test { :Ref<Number> }
object Ref { }

// generic-parent-undef
object Test { :$type }

// generic-unused
object Test<$type> { }

// input-field-null
input Test { field: Test = null }

// input-parent-output
input Test { :Bad }
output Bad { }

// output-enum-bad
output Test { field = unknown }

// output-enums-diff
output Test { field = true }
output Test { field = false }

// output-enumValue-bad
output Test { field = Boolean.unknown }

// output-enumValue-wrong
output Test { field = Wrong.unknown }
input Wrong { }

// output-generic-enum-bad
output Test { | Ref<Boolean.unknown> }
output Ref<$type> { field: $type }

// output-generic-enum-wrong
output Test { | Ref<Wrong.unknown> }
output Ref<$type> { field: $type }
output Wrong { }

// output-params-diff
output Test { field(Param): Test }
output Test { field(Param?): Test }
input Param { }

// output-params-mods-undef
output Test { field(Param[Scalar]): Test }
input Param { }

// output-params-mods-wrong
output Test { field(Param[Test]): Test }
input Param { }

// output-params-undef
output Test { field(Param): Test }

// output-parent-input
output Test { :Bad }
input Bad { }

// parent-alt-mods
object Test { :Parent | Alt }
object Parent { | Alt[] }
object Alt { }

// parent-alt-more
object Test { :Recurse | Alt }
object Recurse { :More }
object More { :Parent }
object Parent { | Alt[] }
object Alt { }

// parent-alt-recurse
object Test { :Recurse | Alt }
object Recurse { :Parent }
object Parent { | Alt[] }
object Alt { }

// parent-alt-self
object Test { :Alt }
object Alt { | Test }

// parent-alt-self-more
object Test { :Alt }
object Alt { | More }
object More { :Recurse }
object Recurse { | Test }

// parent-alt-self-recurse
object Test { :Alt }
object Alt { | Recurse }
object Recurse { :Test }

// parent-fields-alias
object Test { :Parent field1[alias]: Test }
object Parent { field2[alias]: Parent }

// parent-fields-alias-more
object Test { :Recurse field1[alias]: Test }
object Recurse { :More }
object More { :Parent }
object Parent { field2[alias]: Parent }

// parent-fields-alias-recurse
object Test { :Recurse field1[alias]: Test }
object Recurse { :Parent }
object Parent { field2[alias]: Parent }

// parent-fields-mods
object Test { :Parent field: Test }
object Parent { field: Test[] }

// parent-fields-mods-more
object Test { :Recurse field: Test }
object Recurse { :More }
object More { :Parent }
object Parent { field: Test[] }

// parent-fields-mods-recurse
object Test { :Recurse field: Test }
object Recurse { :Parent }
object Parent { field: Test[] }

// parent-more
object Test { :Recurse }
object Recurse { :More }
object More { :Test }

// parent-recurse
object Test { :Recurse }
object Recurse { :Test }

// parent-self
object Test { :Test }

// parent-self-alt
object Test { | Alt }
object Alt { :Test }

// parent-self-alt-more
object Test { | Alt }
object Alt { :More }
object More { | Recurse }
object Recurse { :Test }

// parent-self-alt-recurse
object Test { | Alt }
object Alt { :Recurse }
object Recurse { | Test }

// parent-undef
object Test { :Parent }

// unique-alias
object Test [a] { }
object Dup [a] { }
